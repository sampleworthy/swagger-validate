openapi: 3.1.0
info:
  version: 1.0.0
  title: Stock Price Viewer API
  description: |
    This is a sample Stock Price Viewer Server based on the OpenAPI 3.0 specification.  
  contact:
    name: Justin Laws
    email: Jlaws12@liberty.edu
    
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JLAWS12_1/YoutubeJay/1.0.0
  - description: Stock Price Viewer
    url: beta.jaylaws.com
paths:
  /stock:
    get:
      tags:
        - stock
      summary: Get stock price for all the quotes
      operationId: getStock
      responses:
        '200':
          description: Successful
    post:
      tags:
        - stock
      summary: Updating stock price for a quote
      operationId: postStock
      responses:
        '405':
          description: Invalid Input
        '201':
          description: Update Successfully
  '/stock/{quoteId}':
    get:
      tags:
        - stock
      summary: Get stock price for a specific quote.
      operationId: getStockId
      responses:
        '200':
          description: Successful
        '401':
          description: Quote doesn't exist
      parameters:
        - name: quoteId
          in: path
          description: ID of quote to return
          required: true
          schema:
             type: integer
             format: int64
    put:
      tags: 
      - stock
      summary: Put stock price inside a quote.
      operationId: putStockId
      responses:
        '201':
         description: Successful
      parameters:
        - name: quoteId
          in: path
          description: ID of quote to return
          required: true
          schema:
             type: integer
             format: int64
    delete:
      tags: 
      - stock
      summary: Delete a stock by quote.
      operationId: deleteStockId
      responses:
        '200':
          description: Deleted
      parameters:
        - name: quoteId
          in: path
          description: ID of quote to delete
          required: true
          schema:
             type: integer
             format: int64
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Schema:
      type: object
      properties:
        id:
          type: integer
          format: int64
      description: Test Schema